trigger:
- none

variables:
  - group: JMeter-scripts

stages:
  - stage: RunJMeter
    displayName: 'Run JMeter Tests'
    
    jobs:
      - job: RunTests
        displayName: 'Run JMeter Test Plans'
        pool:
          name: Default   # Use your self-hosted agent pool
        steps:
          # Step 1: Install JMeter
          - task: Bash@3
            displayName: 'Install JMeter'
            inputs:
              targetType: 'inline'
              script: |
                set -e
                echo "Installing OpenJDK $(openjdk-version)..."
                sudo apt-get update
                sudo apt-get install -y openjdk-$(openjdk-version)-jdk
                
                echo "Downloading JMeter $(jmeter-version)..."
                wget https://dlcdn.apache.org/jmeter/binaries/apache-jmeter-$(jmeter-version).tgz
                tar -xvzf apache-jmeter-$(jmeter-version).tgz
                
                echo "Setting up JMeter environment variables..."
                export JMETER_HOME=$(pwd)/apache-jmeter-$(jmeter-version)
                export PATH=$JMETER_HOME/bin:$PATH
                echo "JMeter installed successfully."
                jmeter -v

                # Verify JMeter Installation
                echo "JMeter installed successfully, version:"
                jmeter -v || { echo "JMeter command not found!"; exit 1; }

          # Step 2: Run all JMeter test plans (.jmx files)
          - task: Bash@3
            displayName: 'Run JMeter Test Plans'
            inputs:
              targetType: 'inline'
              script: |
                set -e
                SCRIPT_DIR="$(Script-Path)"
                RESULTS_DIR="$(Build.ArtifactStagingDirectory)/jmeter_results"

                echo "Navigating to JMeter scripts directory: $SCRIPT_DIR"
                if [ ! -d "$SCRIPT_DIR" ]; then
                  echo "Error: JMeter script directory '$SCRIPT_DIR' not found."
                  exit 1
                fi
                cd "$SCRIPT_DIR"

                echo "Creating results directory: $RESULTS_DIR"
                mkdir -p "$RESULTS_DIR"

                echo "Executing JMeter test plans..."
                for jmx_file in *.jmx; do
                  if [ ! -f "$jmx_file" ]; then
                    echo "No JMeter test plans found."
                    exit 0
                  fi
                  
                  echo "Running test plan: $jmx_file"
                  timestamp=$(date +"%Y%m%d_%H%M%S")
                  result_file="${RESULTS_DIR}/${jmx_file%.jmx}_result_${timestamp}.jtl"
                  log_file="${RESULTS_DIR}/${jmx_file%.jmx}_log_${timestamp}.log"

                  jmeter -n -t "$jmx_file" -l "$result_file" -j "$log_file"
                  echo "Results saved to $result_file, logs saved to $log_file"
                done

          # Step 3: Publish JMeter results as an artifact
          - task: PublishBuildArtifacts@1
            displayName: 'Publish JMeter Results'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/jmeter_results'
              ArtifactName: 'JMeterResults'
              publishLocation: 'Container'
